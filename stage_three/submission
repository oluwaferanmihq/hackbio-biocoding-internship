# -*- coding: utf-8 -*-
"""stage-3_task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11DMmydHxxgaQ-bEVHnTp931IBE2BmKbm
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load the dataset
url = "https://raw.githubusercontent.com/HackBio-Internship/2025_project_collection/refs/heads/main/Python/Dataset/diabetes.csv"
df = pd.read_csv(url)

# Display basic info about the dataset
print("Dataset Info:")
print(df.info())
print("\nFirst 5 Rows:")
print(df.head())

# Check for missing values
print("\nMissing Values:")
print(df.isnull().sum())

# Basic statistics
print("\nDataset Summary:")
print(df.describe())

# Visualizing class distribution
plt.figure(figsize=(6,4))
sns.countplot(x=df['Outcome'], palette='viridis')
plt.title('Class Distribution (Diabetes Outcome)')
plt.show()

# Feature correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Feature Correlation Heatmap')
plt.show()

# Distribution of numerical features
df.hist(figsize=(12, 10), bins=20, color='teal', edgecolor='black')
plt.suptitle('Feature Distributions', fontsize=16)
plt.show()

# Boxplots for detecting outliers
plt.figure(figsize=(12, 6))
df.boxplot()
plt.xticks(rotation=45)
plt.title("Boxplots of Features (Outlier Detection)")
plt.show()

# Splitting data into features and target
X = df.drop(columns=['Outcome'])
y = df['Outcome']

# Train-test split (80-20)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Standardizing the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Model Training (Logistic Regression)
model = LogisticRegression(max_iter=1000, random_state=42)
model.fit(X_train, y_train)

# Model Prediction
y_pred = model.predict(X_test)

# Model Evaluation
accuracy = accuracy_score(y_test, y_pred)
print(f"\nModel Accuracy: {accuracy:.4f}")
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Confusion Matrix
plt.figure(figsize=(6,5))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()
