# HackBio Internship - February 2025
# Team Arginine Python 
# This team has four members, viz:
# Abby (GitHub: @AbbyOlawal)
# Oluwaferanmi (GitHub: @oluwaferanmihq)
# Olumide (GitHub: @inyang352)
# Prashant (GitHub: @PrashantPhulpagar)
# Abby (GitHub: @AbbyOlawal) https://www.linkedin.com/in/abigael-edeh-b1a7a015a/
# Oluwaferanmi (GitHub: @oluwaferanmihq) https://www.linkedin.com/in/oluwaferanmiatolagbe/
# Olumide (GitHub: @inyang352) https://www.linkedin.com/in/olumide-inyang-73b224a1/
# Prashant (GitHub: @PrashantPhulpagar) https://www.linkedin.com/in/prashant-phulpagar-0025417a?utm_source=share&utm_campaign=share_via&utm_content=profile&utm_medium=android_app
# GitHub link to team_arginine_python repository for stage 2
https://github.com/AbbyOlawal/Hackbio-biocoding-Internship/blob/main/Stage%202%20task%20code%202.7

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import ttest_ind

# Load dataset
url = "https://raw.githubusercontent.com/HackBio-Internship/public_datasets/main/R/nhanes.csv"
df = pd.read_csv(url)

# Task 1: Process NA values (replace with 0 or remove them)
df = df.fillna(0)  # Replace NA with 0

# Task 2: Visualizing BMI, Weight, Weight in pounds, and Age
plt.figure(figsize=(12, 8))
for i, col in enumerate(["BMI", "Weight", "Age"]):
    plt.subplot(2, 2, i + 1)
    sns.histplot(df[col], bins=30, kde=True)
    plt.title(f"Distribution of {col}")

df["Weight_pounds"] = df["Weight"] * 2.2  # Convert weight to pounds
plt.subplot(2, 2, 4)
sns.histplot(df["Weight_pounds"], bins=30, kde=True)
plt.title("Distribution of Weight (Pounds)")
plt.tight_layout()
plt.show()

# Task 3: Mean 60-second pulse rate
mean_pulse = df["Pulse60"].mean()
print("Mean 60-second pulse rate:", mean_pulse)

# Task 4: Range of diastolic blood pressure
dbp_min = df["BPDia"].min()
dbp_max = df["BPDia"].max()
print(f"Range of Diastolic BP: {dbp_min}-{dbp_max}")

# Task 5: Variance and Standard Deviation of Income
income_variance = df["Income"].var()
income_std = df["Income"].std()
print("Income Variance:", income_variance)
print("Income Standard Deviation:", income_std)

# Task 6: Scatter plots for Weight vs Height
plt.figure(figsize=(15, 5))
for i, hue in enumerate(["Gender", "Diabetes", "Smoking"]):
    plt.subplot(1, 3, i + 1)
    sns.scatterplot(data=df, x="Height", y="Weight", hue=hue, alpha=0.6)
    plt.title(f"Weight vs Height colored by {hue}")
plt.tight_layout()
plt.show()

# Task 7: Conducting t-tests

def perform_ttest(var1, var2):
    group1 = df[df[var2] == df[var2].unique()[0]][var1]
    group2 = df[df[var2] == df[var2].unique()[1]][var1]
    stat, p_value = ttest_ind(group1, group2, nan_policy='omit')
    return p_value

# Age vs Gender
p_val_age_gender = perform_ttest("Age", "Gender")
print("P-value for Age vs Gender:", p_val_age_gender)

# BMI vs Diabetes
p_val_bmi_diabetes = perform_ttest("BMI", "Diabetes")
print("P-value for BMI vs Diabetes:", p_val_bmi_diabetes)

# Alcohol Year vs Relationship Status
p_val_alcohol_relationship = perform_ttest("AlcoholYear", "Relationship")
print("P-value for Alcohol Consumption vs Relationship Status:", p_val_alcohol_relationship)
