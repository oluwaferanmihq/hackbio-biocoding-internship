# HackBio Internship - February 2025

# Oluwaferanmi (GitHub: @oluwaferanmihq) https://www.linkedin.com/in/oluwaferanmiatolagbe/

# GitHub link to Oluwaferanmi repository for stage 1
# https://github.com/oluwaferanmihq/hackbio-biocoding-internship

# question 1
# Convert DNA to RNA sequence
def transcribe(sequence):
    return sequence.replace("T", "U")

# Convert RNA to Protein
def translate_rna(sequence):
    codon_table = {
        'UUU':'F', 'UUC':'F', 'UUA':'L', 'UUG':'L',
        'UCU':'S', 'UCC':'S', 'UCA':'S', 'UCG':'S',
        'UAU':'Y', 'UAC':'Y', 'UAA':'Stop', 'UAG':'Stop',
        'UGU':'C', 'UGC':'C', 'UGA':'Stop', 'UGG':'W',
        'CUU':'L', 'CUC':'L', 'CUA':'L', 'CUG':'L',
        'CCU':'P', 'CCC':'P', 'CCA':'P', 'CCG':'P',
        'CAU':'H', 'CAC':'H', 'CAA':'Q', 'CAG':'Q',
        'CGU':'R', 'CGC':'R', 'CGA':'R', 'CGG':'R',
        'AUU':'I', 'AUC':'I', 'AUA':'I', 'AUG':'M',
        'ACU':'T', 'ACC':'T', 'ACA':'T', 'ACG':'T',
        'AAU':'N', 'AAC':'N', 'AAA':'K', 'AAG':'K',
        'AGU':'S', 'AGC':'S', 'AGA':'R', 'AGG':'R',
        'GUU':'V', 'GUC':'V', 'GUA':'V', 'GUG':'V',
        'GCU':'A', 'GCC':'A', 'GCA':'A', 'GCG':'A',
        'GAU':'D', 'GAC':'D', 'GAA':'E', 'GAG':'E',
        'GGU':'G', 'GGC':'G', 'GGA':'G', 'GGG':'G'
    }
    
    protein = ""
    for i in range(0, len(sequence) - len(sequence) % 3, 3):
        codon = sequence[i:i+3]
        if codon in codon_table:
            amino_acid = codon_table[codon]
            if amino_acid == "Stop":
                break
            protein += amino_acid
        else:
            protein += 'X'  # Unknown codon
    
    return protein

# Example usage
dna_seq = "ATGGCCATTGTAATGGGCCGCTGAAAGGGTGCCCGATAG"
rna_seq = transcribe(dna_seq)
protein_seq = translate_rna(rna_seq)

print("DNA Sequence: ", dna_seq)
print("RNA Sequence: ", rna_seq)
print("Protein Sequence: ", protein_seq)

# question 2
import math

def population_maker(x , k = 2, x_mid = 5):

    solution = 1/(1 + math.exp(-k*(x-x_mid)))

    return solution

#print(population_maker(k = 2, x_mid = 5, x = 10))

od_600 = []

for i in range(0,24):

    od_600.append(population_maker(x = i, k = 0.5, x_mid = 10))

print(od_600)

import seaborn as sns

sns.lineplot(x = range(0,24), y = od_600)

# question 3
def hamming_distance(str1, str2):
    # Determine the length difference
    len_diff = abs(len(str1) - len(str2))
    
    # Calculate the distance for the common length
    min_len = min(len(str1), len(str2))
    distance = sum(1 for i in range(min_len) if str1[i] != str2[i])
    
    # Add the extra length as additional differences
    distance += len_diff
    
    return distance

# Slack username and Twitter handle
slack_username = "oluwaferanmi"
twitter_handle = "oluwaferanmihq"

# Compute Hamming distance
distance = hamming_distance(slack_username, twitter_handle)
print("Hamming Distance:", distance)

